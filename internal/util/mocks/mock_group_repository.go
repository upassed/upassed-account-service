// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/group/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/upassed/upassed-account-service/internal/repository/model"
)

// GroupRepository is a mock of Repository interface.
type GroupRepository struct {
	ctrl     *gomock.Controller
	recorder *GroupRepositoryMockRecorder
}

// GroupRepositoryMockRecorder is the mock recorder for GroupRepository.
type GroupRepositoryMockRecorder struct {
	mock *GroupRepository
}

// NewGroupRepository creates a new mock instance.
func NewGroupRepository(ctrl *gomock.Controller) *GroupRepository {
	mock := &GroupRepository{ctrl: ctrl}
	mock.recorder = &GroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GroupRepository) EXPECT() *GroupRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *GroupRepository) Exists(arg0 context.Context, arg1 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *GroupRepositoryMockRecorder) Exists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*GroupRepository)(nil).Exists), arg0, arg1)
}

// FindByFilter mocks base method.
func (m *GroupRepository) FindByFilter(arg0 context.Context, arg1 *domain.GroupFilter) ([]*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *GroupRepositoryMockRecorder) FindByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*GroupRepository)(nil).FindByFilter), arg0, arg1)
}

// FindByID mocks base method.
func (m *GroupRepository) FindByID(arg0 context.Context, arg1 uuid.UUID) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *GroupRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*GroupRepository)(nil).FindByID), arg0, arg1)
}

// FindStudentsInGroup mocks base method.
func (m *GroupRepository) FindStudentsInGroup(arg0 context.Context, arg1 uuid.UUID) ([]*domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudentsInGroup", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStudentsInGroup indicates an expected call of FindStudentsInGroup.
func (mr *GroupRepositoryMockRecorder) FindStudentsInGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudentsInGroup", reflect.TypeOf((*GroupRepository)(nil).FindStudentsInGroup), arg0, arg1)
}
