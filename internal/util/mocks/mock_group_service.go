// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/group/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/upassed/upassed-account-service/internal/repository/model"
	business "github.com/upassed/upassed-account-service/internal/service/model"
)

// GroupService is a mock of Service interface.
type GroupService struct {
	ctrl     *gomock.Controller
	recorder *GroupServiceMockRecorder
}

// GroupServiceMockRecorder is the mock recorder for GroupService.
type GroupServiceMockRecorder struct {
	mock *GroupService
}

// NewGroupService creates a new mock instance.
func NewGroupService(ctrl *gomock.Controller) *GroupService {
	mock := &GroupService{ctrl: ctrl}
	mock.recorder = &GroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GroupService) EXPECT() *GroupServiceMockRecorder {
	return m.recorder
}

// FindByFilter mocks base method.
func (m *GroupService) FindByFilter(arg0 context.Context, arg1 *business.GroupFilter) ([]*business.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", arg0, arg1)
	ret0, _ := ret[0].([]*business.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *GroupServiceMockRecorder) FindByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*GroupService)(nil).FindByFilter), arg0, arg1)
}

// FindByID mocks base method.
func (m *GroupService) FindByID(arg0 context.Context, arg1 uuid.UUID) (*business.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*business.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *GroupServiceMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*GroupService)(nil).FindByID), arg0, arg1)
}

// FindStudentsInGroup mocks base method.
func (m *GroupService) FindStudentsInGroup(arg0 context.Context, arg1 uuid.UUID) ([]*business.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudentsInGroup", arg0, arg1)
	ret0, _ := ret[0].([]*business.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStudentsInGroup indicates an expected call of FindStudentsInGroup.
func (mr *GroupServiceMockRecorder) FindStudentsInGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudentsInGroup", reflect.TypeOf((*GroupService)(nil).FindStudentsInGroup), arg0, arg1)
}

// unusedGroupRepo1 is a mock of repository interface.
type unusedGroupRepo1 struct {
	ctrl     *gomock.Controller
	recorder *unusedGroupRepo1MockRecorder
}

// unusedGroupRepo1MockRecorder is the mock recorder for unusedGroupRepo1.
type unusedGroupRepo1MockRecorder struct {
	mock *unusedGroupRepo1
}

// NewunusedGroupRepo1 creates a new mock instance.
func NewunusedGroupRepo1(ctrl *gomock.Controller) *unusedGroupRepo1 {
	mock := &unusedGroupRepo1{ctrl: ctrl}
	mock.recorder = &unusedGroupRepo1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *unusedGroupRepo1) EXPECT() *unusedGroupRepo1MockRecorder {
	return m.recorder
}

// FindByFilter mocks base method.
func (m *unusedGroupRepo1) FindByFilter(arg0 context.Context, arg1 *domain.GroupFilter) ([]*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter.
func (mr *unusedGroupRepo1MockRecorder) FindByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*unusedGroupRepo1)(nil).FindByFilter), arg0, arg1)
}

// FindByID mocks base method.
func (m *unusedGroupRepo1) FindByID(arg0 context.Context, arg1 uuid.UUID) (*domain.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*domain.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *unusedGroupRepo1MockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*unusedGroupRepo1)(nil).FindByID), arg0, arg1)
}

// FindStudentsInGroup mocks base method.
func (m *unusedGroupRepo1) FindStudentsInGroup(arg0 context.Context, arg1 uuid.UUID) ([]*domain.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudentsInGroup", arg0, arg1)
	ret0, _ := ret[0].([]*domain.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStudentsInGroup indicates an expected call of FindStudentsInGroup.
func (mr *unusedGroupRepo1MockRecorder) FindStudentsInGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudentsInGroup", reflect.TypeOf((*unusedGroupRepo1)(nil).FindStudentsInGroup), arg0, arg1)
}
