// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: group.proto

package client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _group_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on FindStudentsInGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindStudentsInGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindStudentsInGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindStudentsInGroupRequestMultiError, or nil if none found.
func (m *FindStudentsInGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindStudentsInGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetGroupId()); err != nil {
		err = FindStudentsInGroupRequestValidationError{
			field:  "GroupId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindStudentsInGroupRequestMultiError(errors)
	}

	return nil
}

func (m *FindStudentsInGroupRequest) _validateUuid(uuid string) error {
	if matched := _group_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FindStudentsInGroupRequestMultiError is an error wrapping multiple
// validation errors returned by FindStudentsInGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type FindStudentsInGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindStudentsInGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindStudentsInGroupRequestMultiError) AllErrors() []error { return m }

// FindStudentsInGroupRequestValidationError is the validation error returned
// by FindStudentsInGroupRequest.Validate if the designated constraints aren't met.
type FindStudentsInGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindStudentsInGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindStudentsInGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindStudentsInGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindStudentsInGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindStudentsInGroupRequestValidationError) ErrorName() string {
	return "FindStudentsInGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindStudentsInGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindStudentsInGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindStudentsInGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindStudentsInGroupRequestValidationError{}

// Validate checks the field values on FindStudentsInGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindStudentsInGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindStudentsInGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindStudentsInGroupResponseMultiError, or nil if none found.
func (m *FindStudentsInGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindStudentsInGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudentsInGroup() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindStudentsInGroupResponseValidationError{
						field:  fmt.Sprintf("StudentsInGroup[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindStudentsInGroupResponseValidationError{
						field:  fmt.Sprintf("StudentsInGroup[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindStudentsInGroupResponseValidationError{
					field:  fmt.Sprintf("StudentsInGroup[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindStudentsInGroupResponseMultiError(errors)
	}

	return nil
}

// FindStudentsInGroupResponseMultiError is an error wrapping multiple
// validation errors returned by FindStudentsInGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type FindStudentsInGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindStudentsInGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindStudentsInGroupResponseMultiError) AllErrors() []error { return m }

// FindStudentsInGroupResponseValidationError is the validation error returned
// by FindStudentsInGroupResponse.Validate if the designated constraints
// aren't met.
type FindStudentsInGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindStudentsInGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindStudentsInGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindStudentsInGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindStudentsInGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindStudentsInGroupResponseValidationError) ErrorName() string {
	return "FindStudentsInGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindStudentsInGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindStudentsInGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindStudentsInGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindStudentsInGroupResponseValidationError{}

// Validate checks the field values on GroupFindByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupFindByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupFindByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupFindByIDRequestMultiError, or nil if none found.
func (m *GroupFindByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupFindByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetGroupId()); err != nil {
		err = GroupFindByIDRequestValidationError{
			field:  "GroupId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupFindByIDRequestMultiError(errors)
	}

	return nil
}

func (m *GroupFindByIDRequest) _validateUuid(uuid string) error {
	if matched := _group_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GroupFindByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GroupFindByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupFindByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupFindByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupFindByIDRequestMultiError) AllErrors() []error { return m }

// GroupFindByIDRequestValidationError is the validation error returned by
// GroupFindByIDRequest.Validate if the designated constraints aren't met.
type GroupFindByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupFindByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupFindByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupFindByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupFindByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupFindByIDRequestValidationError) ErrorName() string {
	return "GroupFindByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupFindByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupFindByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupFindByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupFindByIDRequestValidationError{}

// Validate checks the field values on GroupFindByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupFindByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupFindByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupFindByIDResponseMultiError, or nil if none found.
func (m *GroupFindByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupFindByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GroupFindByIDResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GroupFindByIDResponseValidationError{
					field:  "Group",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GroupFindByIDResponseValidationError{
				field:  "Group",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GroupFindByIDResponseMultiError(errors)
	}

	return nil
}

// GroupFindByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GroupFindByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GroupFindByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupFindByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupFindByIDResponseMultiError) AllErrors() []error { return m }

// GroupFindByIDResponseValidationError is the validation error returned by
// GroupFindByIDResponse.Validate if the designated constraints aren't met.
type GroupFindByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupFindByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupFindByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupFindByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupFindByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupFindByIDResponseValidationError) ErrorName() string {
	return "GroupFindByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupFindByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupFindByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupFindByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupFindByIDResponseValidationError{}

// Validate checks the field values on GroupSearchByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupSearchByFilterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSearchByFilterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSearchByFilterRequestMultiError, or nil if none found.
func (m *GroupSearchByFilterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSearchByFilterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSpecializationCode()) > 10 {
		err := GroupSearchByFilterRequestValidationError{
			field:  "SpecializationCode",
			reason: "value length must be at most 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGroupNumber()) > 10 {
		err := GroupSearchByFilterRequestValidationError{
			field:  "GroupNumber",
			reason: "value length must be at most 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupSearchByFilterRequestMultiError(errors)
	}

	return nil
}

// GroupSearchByFilterRequestMultiError is an error wrapping multiple
// validation errors returned by GroupSearchByFilterRequest.ValidateAll() if
// the designated constraints aren't met.
type GroupSearchByFilterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSearchByFilterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSearchByFilterRequestMultiError) AllErrors() []error { return m }

// GroupSearchByFilterRequestValidationError is the validation error returned
// by GroupSearchByFilterRequest.Validate if the designated constraints aren't met.
type GroupSearchByFilterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSearchByFilterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSearchByFilterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSearchByFilterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSearchByFilterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSearchByFilterRequestValidationError) ErrorName() string {
	return "GroupSearchByFilterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSearchByFilterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSearchByFilterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSearchByFilterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSearchByFilterRequestValidationError{}

// Validate checks the field values on GroupSearchByFilterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupSearchByFilterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSearchByFilterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSearchByFilterResponseMultiError, or nil if none found.
func (m *GroupSearchByFilterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSearchByFilterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMatchedGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GroupSearchByFilterResponseValidationError{
						field:  fmt.Sprintf("MatchedGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GroupSearchByFilterResponseValidationError{
						field:  fmt.Sprintf("MatchedGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GroupSearchByFilterResponseValidationError{
					field:  fmt.Sprintf("MatchedGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GroupSearchByFilterResponseMultiError(errors)
	}

	return nil
}

// GroupSearchByFilterResponseMultiError is an error wrapping multiple
// validation errors returned by GroupSearchByFilterResponse.ValidateAll() if
// the designated constraints aren't met.
type GroupSearchByFilterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSearchByFilterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSearchByFilterResponseMultiError) AllErrors() []error { return m }

// GroupSearchByFilterResponseValidationError is the validation error returned
// by GroupSearchByFilterResponse.Validate if the designated constraints
// aren't met.
type GroupSearchByFilterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSearchByFilterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSearchByFilterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSearchByFilterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSearchByFilterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSearchByFilterResponseValidationError) ErrorName() string {
	return "GroupSearchByFilterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSearchByFilterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSearchByFilterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSearchByFilterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSearchByFilterResponseValidationError{}
