// code generated by protoc-gen-validate. DO NOT EDIT.
// source: student.proto

package client

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _student_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on StudentCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentCreateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentCreateRequestMultiError, or nil if none found.
func (m *StudentCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 2 || l > 20 {
		err := StudentCreateRequestValidationError{
			field:  "FirstName",
			reason: "value length must be between 2 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 3 || l > 30 {
		err := StudentCreateRequestValidationError{
			field:  "LastName",
			reason: "value length must be between 3 and 30 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMiddleName()) > 20 {
		err := StudentCreateRequestValidationError{
			field:  "MiddleName",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEducationalEmail()); err != nil {
		err = StudentCreateRequestValidationError{
			field:  "EducationalEmail",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 5 || l > 20 {
		err := StudentCreateRequestValidationError{
			field:  "Username",
			reason: "value length must be between 5 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetGroupId()); err != nil {
		err = StudentCreateRequestValidationError{
			field:  "GroupId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StudentCreateRequestMultiError(errors)
	}

	return nil
}

func (m *StudentCreateRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *StudentCreateRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *StudentCreateRequest) _validateUuid(uuid string) error {
	if matched := _student_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// StudentCreateRequestMultiError is an error wrapping multiple validation
// errors returned by StudentCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type StudentCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentCreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentCreateRequestMultiError) AllErrors() []error { return m }

// StudentCreateRequestValidationError is the validation error returned by
// StudentCreateRequest.Validate if the designated constraints aren't met.
type StudentCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentCreateRequestValidationError) ErrorName() string {
	return "StudentCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StudentCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentCreateRequestValidationError{}

// Validate checks the field values on StudentCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentCreateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentCreateResponseMultiError, or nil if none found.
func (m *StudentCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedStudentId

	if len(errors) > 0 {
		return StudentCreateResponseMultiError(errors)
	}

	return nil
}

// StudentCreateResponseMultiError is an error wrapping multiple validation
// errors returned by StudentCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type StudentCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentCreateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentCreateResponseMultiError) AllErrors() []error { return m }

// StudentCreateResponseValidationError is the validation error returned by
// StudentCreateResponse.Validate if the designated constraints aren't met.
type StudentCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentCreateResponseValidationError) ErrorName() string {
	return "StudentCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StudentCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentCreateResponseValidationError{}

// Validate checks the field values on StudentFindByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentFindByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentFindByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentFindByIDRequestMultiError, or nil if none found.
func (m *StudentFindByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentFindByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStudentId()); err != nil {
		err = StudentFindByIDRequestValidationError{
			field:  "StudentId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StudentFindByIDRequestMultiError(errors)
	}

	return nil
}

func (m *StudentFindByIDRequest) _validateUuid(uuid string) error {
	if matched := _student_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// StudentFindByIDRequestMultiError is an error wrapping multiple validation
// errors returned by StudentFindByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type StudentFindByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentFindByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentFindByIDRequestMultiError) AllErrors() []error { return m }

// StudentFindByIDRequestValidationError is the validation error returned by
// StudentFindByIDRequest.Validate if the designated constraints aren't met.
type StudentFindByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentFindByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentFindByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentFindByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentFindByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentFindByIDRequestValidationError) ErrorName() string {
	return "StudentFindByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StudentFindByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentFindByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentFindByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentFindByIDRequestValidationError{}

// Validate checks the field values on StudentFindByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentFindByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentFindByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentFindByIDResponseMultiError, or nil if none found.
func (m *StudentFindByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentFindByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentFindByIDResponseValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentFindByIDResponseValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentFindByIDResponseValidationError{
				field:  "Student",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudentFindByIDResponseMultiError(errors)
	}

	return nil
}

// StudentFindByIDResponseMultiError is an error wrapping multiple validation
// errors returned by StudentFindByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type StudentFindByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentFindByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentFindByIDResponseMultiError) AllErrors() []error { return m }

// StudentFindByIDResponseValidationError is the validation error returned by
// StudentFindByIDResponse.Validate if the designated constraints aren't met.
type StudentFindByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentFindByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentFindByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentFindByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentFindByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentFindByIDResponseValidationError) ErrorName() string {
	return "StudentFindByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StudentFindByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentFindByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentFindByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentFindByIDResponseValidationError{}
